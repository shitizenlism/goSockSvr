// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commu_2eproto;
namespace ivi {
class DetectRecordConfig;
class DetectRecordConfigDefaultTypeInternal;
extern DetectRecordConfigDefaultTypeInternal _DetectRecordConfig_default_instance_;
class DetectRecordConfigReply;
class DetectRecordConfigReplyDefaultTypeInternal;
extern DetectRecordConfigReplyDefaultTypeInternal _DetectRecordConfigReply_default_instance_;
class HeartInfo;
class HeartInfoDefaultTypeInternal;
extern HeartInfoDefaultTypeInternal _HeartInfo_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
}  // namespace ivi
PROTOBUF_NAMESPACE_OPEN
template<> ::ivi::DetectRecordConfig* Arena::CreateMaybeMessage<::ivi::DetectRecordConfig>(Arena*);
template<> ::ivi::DetectRecordConfigReply* Arena::CreateMaybeMessage<::ivi::DetectRecordConfigReply>(Arena*);
template<> ::ivi::HeartInfo* Arena::CreateMaybeMessage<::ivi::HeartInfo>(Arena*);
template<> ::ivi::Login* Arena::CreateMaybeMessage<::ivi::Login>(Arena*);
template<> ::ivi::LoginReply* Arena::CreateMaybeMessage<::ivi::LoginReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ivi {

// ===================================================================

class Login :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivi.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(nullptr);
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ivi.Login";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commu_2eproto);
    return ::descriptor_table_commu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevTypeFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // string DevType = 1;
  void clear_devtype();
  const std::string& devtype() const;
  void set_devtype(const std::string& value);
  void set_devtype(std::string&& value);
  void set_devtype(const char* value);
  void set_devtype(const char* value, size_t size);
  std::string* mutable_devtype();
  std::string* release_devtype();
  void set_allocated_devtype(std::string* devtype);
  private:
  const std::string& _internal_devtype() const;
  void _internal_set_devtype(const std::string& value);
  std::string* _internal_mutable_devtype();
  public:

  // string TableId = 2;
  void clear_tableid();
  const std::string& tableid() const;
  void set_tableid(const std::string& value);
  void set_tableid(std::string&& value);
  void set_tableid(const char* value);
  void set_tableid(const char* value, size_t size);
  std::string* mutable_tableid();
  std::string* release_tableid();
  void set_allocated_tableid(std::string* tableid);
  private:
  const std::string& _internal_tableid() const;
  void _internal_set_tableid(const std::string& value);
  std::string* _internal_mutable_tableid();
  public:

  // @@protoc_insertion_point(class_scope:ivi.Login)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commu_2eproto;
};
// -------------------------------------------------------------------

class LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivi.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ivi.LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commu_2eproto);
    return ::descriptor_table_commu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCuidFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string Cuid = 2;
  void clear_cuid();
  const std::string& cuid() const;
  void set_cuid(const std::string& value);
  void set_cuid(std::string&& value);
  void set_cuid(const char* value);
  void set_cuid(const char* value, size_t size);
  std::string* mutable_cuid();
  std::string* release_cuid();
  void set_allocated_cuid(std::string* cuid);
  private:
  const std::string& _internal_cuid() const;
  void _internal_set_cuid(const std::string& value);
  std::string* _internal_mutable_cuid();
  public:

  // uint32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ivi.LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commu_2eproto;
};
// -------------------------------------------------------------------

class HeartInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivi.HeartInfo) */ {
 public:
  HeartInfo();
  virtual ~HeartInfo();

  HeartInfo(const HeartInfo& from);
  HeartInfo(HeartInfo&& from) noexcept
    : HeartInfo() {
    *this = ::std::move(from);
  }

  inline HeartInfo& operator=(const HeartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartInfo& operator=(HeartInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartInfo* internal_default_instance() {
    return reinterpret_cast<const HeartInfo*>(
               &_HeartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartInfo& a, HeartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartInfo* New() const final {
    return CreateMaybeMessage<HeartInfo>(nullptr);
  }

  HeartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartInfo& from);
  void MergeFrom(const HeartInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ivi.HeartInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commu_2eproto);
    return ::descriptor_table_commu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCuidFieldNumber = 1,
  };
  // string Cuid = 1;
  void clear_cuid();
  const std::string& cuid() const;
  void set_cuid(const std::string& value);
  void set_cuid(std::string&& value);
  void set_cuid(const char* value);
  void set_cuid(const char* value, size_t size);
  std::string* mutable_cuid();
  std::string* release_cuid();
  void set_allocated_cuid(std::string* cuid);
  private:
  const std::string& _internal_cuid() const;
  void _internal_set_cuid(const std::string& value);
  std::string* _internal_mutable_cuid();
  public:

  // @@protoc_insertion_point(class_scope:ivi.HeartInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commu_2eproto;
};
// -------------------------------------------------------------------

class DetectRecordConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivi.DetectRecordConfig) */ {
 public:
  DetectRecordConfig();
  virtual ~DetectRecordConfig();

  DetectRecordConfig(const DetectRecordConfig& from);
  DetectRecordConfig(DetectRecordConfig&& from) noexcept
    : DetectRecordConfig() {
    *this = ::std::move(from);
  }

  inline DetectRecordConfig& operator=(const DetectRecordConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRecordConfig& operator=(DetectRecordConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRecordConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectRecordConfig* internal_default_instance() {
    return reinterpret_cast<const DetectRecordConfig*>(
               &_DetectRecordConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DetectRecordConfig& a, DetectRecordConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRecordConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectRecordConfig* New() const final {
    return CreateMaybeMessage<DetectRecordConfig>(nullptr);
  }

  DetectRecordConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRecordConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRecordConfig& from);
  void MergeFrom(const DetectRecordConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRecordConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ivi.DetectRecordConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commu_2eproto);
    return ::descriptor_table_commu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCuidFieldNumber = 1,
    kCleanTimeFieldNumber = 6,
    kIsCleanImgFieldNumber = 2,
    kIsCleanLogFieldNumber = 3,
    kIsCleanCSVFieldNumber = 4,
    kSaveDaysFieldNumber = 5,
  };
  // string Cuid = 1;
  void clear_cuid();
  const std::string& cuid() const;
  void set_cuid(const std::string& value);
  void set_cuid(std::string&& value);
  void set_cuid(const char* value);
  void set_cuid(const char* value, size_t size);
  std::string* mutable_cuid();
  std::string* release_cuid();
  void set_allocated_cuid(std::string* cuid);
  private:
  const std::string& _internal_cuid() const;
  void _internal_set_cuid(const std::string& value);
  std::string* _internal_mutable_cuid();
  public:

  // string CleanTime = 6;
  void clear_cleantime();
  const std::string& cleantime() const;
  void set_cleantime(const std::string& value);
  void set_cleantime(std::string&& value);
  void set_cleantime(const char* value);
  void set_cleantime(const char* value, size_t size);
  std::string* mutable_cleantime();
  std::string* release_cleantime();
  void set_allocated_cleantime(std::string* cleantime);
  private:
  const std::string& _internal_cleantime() const;
  void _internal_set_cleantime(const std::string& value);
  std::string* _internal_mutable_cleantime();
  public:

  // bool IsCleanImg = 2;
  void clear_iscleanimg();
  bool iscleanimg() const;
  void set_iscleanimg(bool value);
  private:
  bool _internal_iscleanimg() const;
  void _internal_set_iscleanimg(bool value);
  public:

  // bool IsCleanLog = 3;
  void clear_iscleanlog();
  bool iscleanlog() const;
  void set_iscleanlog(bool value);
  private:
  bool _internal_iscleanlog() const;
  void _internal_set_iscleanlog(bool value);
  public:

  // bool IsCleanCSV = 4;
  void clear_iscleancsv();
  bool iscleancsv() const;
  void set_iscleancsv(bool value);
  private:
  bool _internal_iscleancsv() const;
  void _internal_set_iscleancsv(bool value);
  public:

  // int32 SaveDays = 5;
  void clear_savedays();
  ::PROTOBUF_NAMESPACE_ID::int32 savedays() const;
  void set_savedays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_savedays() const;
  void _internal_set_savedays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ivi.DetectRecordConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cleantime_;
  bool iscleanimg_;
  bool iscleanlog_;
  bool iscleancsv_;
  ::PROTOBUF_NAMESPACE_ID::int32 savedays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commu_2eproto;
};
// -------------------------------------------------------------------

class DetectRecordConfigReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ivi.DetectRecordConfigReply) */ {
 public:
  DetectRecordConfigReply();
  virtual ~DetectRecordConfigReply();

  DetectRecordConfigReply(const DetectRecordConfigReply& from);
  DetectRecordConfigReply(DetectRecordConfigReply&& from) noexcept
    : DetectRecordConfigReply() {
    *this = ::std::move(from);
  }

  inline DetectRecordConfigReply& operator=(const DetectRecordConfigReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRecordConfigReply& operator=(DetectRecordConfigReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectRecordConfigReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectRecordConfigReply* internal_default_instance() {
    return reinterpret_cast<const DetectRecordConfigReply*>(
               &_DetectRecordConfigReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetectRecordConfigReply& a, DetectRecordConfigReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRecordConfigReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectRecordConfigReply* New() const final {
    return CreateMaybeMessage<DetectRecordConfigReply>(nullptr);
  }

  DetectRecordConfigReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectRecordConfigReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectRecordConfigReply& from);
  void MergeFrom(const DetectRecordConfigReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRecordConfigReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ivi.DetectRecordConfigReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commu_2eproto);
    return ::descriptor_table_commu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCuidFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string Cuid = 2;
  void clear_cuid();
  const std::string& cuid() const;
  void set_cuid(const std::string& value);
  void set_cuid(std::string&& value);
  void set_cuid(const char* value);
  void set_cuid(const char* value, size_t size);
  std::string* mutable_cuid();
  std::string* release_cuid();
  void set_allocated_cuid(std::string* cuid);
  private:
  const std::string& _internal_cuid() const;
  void _internal_set_cuid(const std::string& value);
  std::string* _internal_mutable_cuid();
  public:

  // uint32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ivi.DetectRecordConfigReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_commu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string DevType = 1;
inline void Login::clear_devtype() {
  devtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login::devtype() const {
  // @@protoc_insertion_point(field_get:ivi.Login.DevType)
  return _internal_devtype();
}
inline void Login::set_devtype(const std::string& value) {
  _internal_set_devtype(value);
  // @@protoc_insertion_point(field_set:ivi.Login.DevType)
}
inline std::string* Login::mutable_devtype() {
  // @@protoc_insertion_point(field_mutable:ivi.Login.DevType)
  return _internal_mutable_devtype();
}
inline const std::string& Login::_internal_devtype() const {
  return devtype_.GetNoArena();
}
inline void Login::_internal_set_devtype(const std::string& value) {
  
  devtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login::set_devtype(std::string&& value) {
  
  devtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.Login.DevType)
}
inline void Login::set_devtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.Login.DevType)
}
inline void Login::set_devtype(const char* value, size_t size) {
  
  devtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.Login.DevType)
}
inline std::string* Login::_internal_mutable_devtype() {
  
  return devtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_devtype() {
  // @@protoc_insertion_point(field_release:ivi.Login.DevType)
  
  return devtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_devtype(std::string* devtype) {
  if (devtype != nullptr) {
    
  } else {
    
  }
  devtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devtype);
  // @@protoc_insertion_point(field_set_allocated:ivi.Login.DevType)
}

// string TableId = 2;
inline void Login::clear_tableid() {
  tableid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login::tableid() const {
  // @@protoc_insertion_point(field_get:ivi.Login.TableId)
  return _internal_tableid();
}
inline void Login::set_tableid(const std::string& value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:ivi.Login.TableId)
}
inline std::string* Login::mutable_tableid() {
  // @@protoc_insertion_point(field_mutable:ivi.Login.TableId)
  return _internal_mutable_tableid();
}
inline const std::string& Login::_internal_tableid() const {
  return tableid_.GetNoArena();
}
inline void Login::_internal_set_tableid(const std::string& value) {
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login::set_tableid(std::string&& value) {
  
  tableid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.Login.TableId)
}
inline void Login::set_tableid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.Login.TableId)
}
inline void Login::set_tableid(const char* value, size_t size) {
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.Login.TableId)
}
inline std::string* Login::_internal_mutable_tableid() {
  
  return tableid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_tableid() {
  // @@protoc_insertion_point(field_release:ivi.Login.TableId)
  
  return tableid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_tableid(std::string* tableid) {
  if (tableid != nullptr) {
    
  } else {
    
  }
  tableid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tableid);
  // @@protoc_insertion_point(field_set_allocated:ivi.Login.TableId)
}

// -------------------------------------------------------------------

// LoginReply

// uint32 error = 1;
inline void LoginReply::clear_error() {
  error_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReply::error() const {
  // @@protoc_insertion_point(field_get:ivi.LoginReply.error)
  return _internal_error();
}
inline void LoginReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_ = value;
}
inline void LoginReply::set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ivi.LoginReply.error)
}

// string Cuid = 2;
inline void LoginReply::clear_cuid() {
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::cuid() const {
  // @@protoc_insertion_point(field_get:ivi.LoginReply.Cuid)
  return _internal_cuid();
}
inline void LoginReply::set_cuid(const std::string& value) {
  _internal_set_cuid(value);
  // @@protoc_insertion_point(field_set:ivi.LoginReply.Cuid)
}
inline std::string* LoginReply::mutable_cuid() {
  // @@protoc_insertion_point(field_mutable:ivi.LoginReply.Cuid)
  return _internal_mutable_cuid();
}
inline const std::string& LoginReply::_internal_cuid() const {
  return cuid_.GetNoArena();
}
inline void LoginReply::_internal_set_cuid(const std::string& value) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_cuid(std::string&& value) {
  
  cuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.LoginReply.Cuid)
}
inline void LoginReply::set_cuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.LoginReply.Cuid)
}
inline void LoginReply::set_cuid(const char* value, size_t size) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.LoginReply.Cuid)
}
inline std::string* LoginReply::_internal_mutable_cuid() {
  
  return cuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_cuid() {
  // @@protoc_insertion_point(field_release:ivi.LoginReply.Cuid)
  
  return cuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_cuid(std::string* cuid) {
  if (cuid != nullptr) {
    
  } else {
    
  }
  cuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cuid);
  // @@protoc_insertion_point(field_set_allocated:ivi.LoginReply.Cuid)
}

// -------------------------------------------------------------------

// HeartInfo

// string Cuid = 1;
inline void HeartInfo::clear_cuid() {
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HeartInfo::cuid() const {
  // @@protoc_insertion_point(field_get:ivi.HeartInfo.Cuid)
  return _internal_cuid();
}
inline void HeartInfo::set_cuid(const std::string& value) {
  _internal_set_cuid(value);
  // @@protoc_insertion_point(field_set:ivi.HeartInfo.Cuid)
}
inline std::string* HeartInfo::mutable_cuid() {
  // @@protoc_insertion_point(field_mutable:ivi.HeartInfo.Cuid)
  return _internal_mutable_cuid();
}
inline const std::string& HeartInfo::_internal_cuid() const {
  return cuid_.GetNoArena();
}
inline void HeartInfo::_internal_set_cuid(const std::string& value) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HeartInfo::set_cuid(std::string&& value) {
  
  cuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.HeartInfo.Cuid)
}
inline void HeartInfo::set_cuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.HeartInfo.Cuid)
}
inline void HeartInfo::set_cuid(const char* value, size_t size) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.HeartInfo.Cuid)
}
inline std::string* HeartInfo::_internal_mutable_cuid() {
  
  return cuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HeartInfo::release_cuid() {
  // @@protoc_insertion_point(field_release:ivi.HeartInfo.Cuid)
  
  return cuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HeartInfo::set_allocated_cuid(std::string* cuid) {
  if (cuid != nullptr) {
    
  } else {
    
  }
  cuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cuid);
  // @@protoc_insertion_point(field_set_allocated:ivi.HeartInfo.Cuid)
}

// -------------------------------------------------------------------

// DetectRecordConfig

// string Cuid = 1;
inline void DetectRecordConfig::clear_cuid() {
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRecordConfig::cuid() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.Cuid)
  return _internal_cuid();
}
inline void DetectRecordConfig::set_cuid(const std::string& value) {
  _internal_set_cuid(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.Cuid)
}
inline std::string* DetectRecordConfig::mutable_cuid() {
  // @@protoc_insertion_point(field_mutable:ivi.DetectRecordConfig.Cuid)
  return _internal_mutable_cuid();
}
inline const std::string& DetectRecordConfig::_internal_cuid() const {
  return cuid_.GetNoArena();
}
inline void DetectRecordConfig::_internal_set_cuid(const std::string& value) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetectRecordConfig::set_cuid(std::string&& value) {
  
  cuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.DetectRecordConfig.Cuid)
}
inline void DetectRecordConfig::set_cuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.DetectRecordConfig.Cuid)
}
inline void DetectRecordConfig::set_cuid(const char* value, size_t size) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.DetectRecordConfig.Cuid)
}
inline std::string* DetectRecordConfig::_internal_mutable_cuid() {
  
  return cuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRecordConfig::release_cuid() {
  // @@protoc_insertion_point(field_release:ivi.DetectRecordConfig.Cuid)
  
  return cuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRecordConfig::set_allocated_cuid(std::string* cuid) {
  if (cuid != nullptr) {
    
  } else {
    
  }
  cuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cuid);
  // @@protoc_insertion_point(field_set_allocated:ivi.DetectRecordConfig.Cuid)
}

// bool IsCleanImg = 2;
inline void DetectRecordConfig::clear_iscleanimg() {
  iscleanimg_ = false;
}
inline bool DetectRecordConfig::_internal_iscleanimg() const {
  return iscleanimg_;
}
inline bool DetectRecordConfig::iscleanimg() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.IsCleanImg)
  return _internal_iscleanimg();
}
inline void DetectRecordConfig::_internal_set_iscleanimg(bool value) {
  
  iscleanimg_ = value;
}
inline void DetectRecordConfig::set_iscleanimg(bool value) {
  _internal_set_iscleanimg(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.IsCleanImg)
}

// bool IsCleanLog = 3;
inline void DetectRecordConfig::clear_iscleanlog() {
  iscleanlog_ = false;
}
inline bool DetectRecordConfig::_internal_iscleanlog() const {
  return iscleanlog_;
}
inline bool DetectRecordConfig::iscleanlog() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.IsCleanLog)
  return _internal_iscleanlog();
}
inline void DetectRecordConfig::_internal_set_iscleanlog(bool value) {
  
  iscleanlog_ = value;
}
inline void DetectRecordConfig::set_iscleanlog(bool value) {
  _internal_set_iscleanlog(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.IsCleanLog)
}

// bool IsCleanCSV = 4;
inline void DetectRecordConfig::clear_iscleancsv() {
  iscleancsv_ = false;
}
inline bool DetectRecordConfig::_internal_iscleancsv() const {
  return iscleancsv_;
}
inline bool DetectRecordConfig::iscleancsv() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.IsCleanCSV)
  return _internal_iscleancsv();
}
inline void DetectRecordConfig::_internal_set_iscleancsv(bool value) {
  
  iscleancsv_ = value;
}
inline void DetectRecordConfig::set_iscleancsv(bool value) {
  _internal_set_iscleancsv(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.IsCleanCSV)
}

// int32 SaveDays = 5;
inline void DetectRecordConfig::clear_savedays() {
  savedays_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectRecordConfig::_internal_savedays() const {
  return savedays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DetectRecordConfig::savedays() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.SaveDays)
  return _internal_savedays();
}
inline void DetectRecordConfig::_internal_set_savedays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  savedays_ = value;
}
inline void DetectRecordConfig::set_savedays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_savedays(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.SaveDays)
}

// string CleanTime = 6;
inline void DetectRecordConfig::clear_cleantime() {
  cleantime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRecordConfig::cleantime() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfig.CleanTime)
  return _internal_cleantime();
}
inline void DetectRecordConfig::set_cleantime(const std::string& value) {
  _internal_set_cleantime(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfig.CleanTime)
}
inline std::string* DetectRecordConfig::mutable_cleantime() {
  // @@protoc_insertion_point(field_mutable:ivi.DetectRecordConfig.CleanTime)
  return _internal_mutable_cleantime();
}
inline const std::string& DetectRecordConfig::_internal_cleantime() const {
  return cleantime_.GetNoArena();
}
inline void DetectRecordConfig::_internal_set_cleantime(const std::string& value) {
  
  cleantime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetectRecordConfig::set_cleantime(std::string&& value) {
  
  cleantime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.DetectRecordConfig.CleanTime)
}
inline void DetectRecordConfig::set_cleantime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cleantime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.DetectRecordConfig.CleanTime)
}
inline void DetectRecordConfig::set_cleantime(const char* value, size_t size) {
  
  cleantime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.DetectRecordConfig.CleanTime)
}
inline std::string* DetectRecordConfig::_internal_mutable_cleantime() {
  
  return cleantime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRecordConfig::release_cleantime() {
  // @@protoc_insertion_point(field_release:ivi.DetectRecordConfig.CleanTime)
  
  return cleantime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRecordConfig::set_allocated_cleantime(std::string* cleantime) {
  if (cleantime != nullptr) {
    
  } else {
    
  }
  cleantime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cleantime);
  // @@protoc_insertion_point(field_set_allocated:ivi.DetectRecordConfig.CleanTime)
}

// -------------------------------------------------------------------

// DetectRecordConfigReply

// uint32 error = 1;
inline void DetectRecordConfigReply::clear_error() {
  error_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetectRecordConfigReply::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetectRecordConfigReply::error() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfigReply.error)
  return _internal_error();
}
inline void DetectRecordConfigReply::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_ = value;
}
inline void DetectRecordConfigReply::set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfigReply.error)
}

// string Cuid = 2;
inline void DetectRecordConfigReply::clear_cuid() {
  cuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DetectRecordConfigReply::cuid() const {
  // @@protoc_insertion_point(field_get:ivi.DetectRecordConfigReply.Cuid)
  return _internal_cuid();
}
inline void DetectRecordConfigReply::set_cuid(const std::string& value) {
  _internal_set_cuid(value);
  // @@protoc_insertion_point(field_set:ivi.DetectRecordConfigReply.Cuid)
}
inline std::string* DetectRecordConfigReply::mutable_cuid() {
  // @@protoc_insertion_point(field_mutable:ivi.DetectRecordConfigReply.Cuid)
  return _internal_mutable_cuid();
}
inline const std::string& DetectRecordConfigReply::_internal_cuid() const {
  return cuid_.GetNoArena();
}
inline void DetectRecordConfigReply::_internal_set_cuid(const std::string& value) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DetectRecordConfigReply::set_cuid(std::string&& value) {
  
  cuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ivi.DetectRecordConfigReply.Cuid)
}
inline void DetectRecordConfigReply::set_cuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ivi.DetectRecordConfigReply.Cuid)
}
inline void DetectRecordConfigReply::set_cuid(const char* value, size_t size) {
  
  cuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ivi.DetectRecordConfigReply.Cuid)
}
inline std::string* DetectRecordConfigReply::_internal_mutable_cuid() {
  
  return cuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DetectRecordConfigReply::release_cuid() {
  // @@protoc_insertion_point(field_release:ivi.DetectRecordConfigReply.Cuid)
  
  return cuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DetectRecordConfigReply::set_allocated_cuid(std::string* cuid) {
  if (cuid != nullptr) {
    
  } else {
    
  }
  cuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cuid);
  // @@protoc_insertion_point(field_set_allocated:ivi.DetectRecordConfigReply.Cuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ivi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commu_2eproto
